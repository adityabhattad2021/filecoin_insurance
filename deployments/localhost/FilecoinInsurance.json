{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_durationBetweenPayments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_insuranceDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "paidAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payeeAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timeOfPayment",
          "type": "uint256"
        }
      ],
      "name": "PremiumPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "coverageAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "periodicPremium",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "insuranceDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minDurationBetweenPayments",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxDurationBetweenPayments",
          "type": "uint256"
        }
      ],
      "name": "insuranceVariablesAdjusted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getPremium",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "insuranceIssuees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isInsured",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "payeeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timesPremiumPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeOfLastPremiumPayment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeOfClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "regularPremiumAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimPaid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "storageProvider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_periodicPremium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_claimAmount",
          "type": "uint256"
        }
      ],
      "name": "registerStorageProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2316200e10ae842be4fab719e3c983f8f28ce1ce816c343649c5cd520ef843fd",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1282502",
    "logsBloom": "0x
    "blockHash": "0xa2f7d0db547b84dbc8d1cdc8e78c23e9182e4e4b7012dc5ac96401decb46d6df",
    "transactionHash": "0x2316200e10ae842be4fab719e3c983f8f28ce1ce816c343649c5cd520ef843fd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x2316200e10ae842be4fab719e3c983f8f28ce1ce816c343649c5cd520ef843fd",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa2f7d0db547b84dbc8d1cdc8e78c23e9182e4e4b7012dc5ac96401decb46d6df"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "1282502",
    "status": 1,
    "byzantium": true
  },
  "args": [
    2592000,
    31104000
  ],
  "numDeployments": 1,
  "solcInputHash": "008701e6fe72bb9a8c1d14cf2f4499bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationBetweenPayments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_insuranceDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payeeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeOfPayment\",\"type\":\"uint256\"}],\"name\":\"PremiumPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"coverageAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"periodicPremium\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"insuranceDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDurationBetweenPayments\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDurationBetweenPayments\",\"type\":\"uint256\"}],\"name\":\"insuranceVariablesAdjusted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getPremium\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"insuranceIssuees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isInsured\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"payeeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timesPremiumPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeOfLastPremiumPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeOfClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"regularPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimPaid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storageProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_periodicPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimAmount\",\"type\":\"uint256\"}],\"name\":\"registerStorageProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPremium()\":{\"details\":\"Only valid storage provider can pay premium\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerStorageProvider(address,uint256,uint256)\":{\"details\":\"Only owner can register a storage provider\",\"params\":{\"_claimAmount\":\"Amount of claim to be paid\",\"_periodicPremium\":\"Amount of premium to be paid\",\"storageProvider\":\"Address of the storage provider\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPremium()\":{\"notice\":\"Pay premium\"},\"registerStorageProvider(address,uint256,uint256)\":{\"notice\":\"Register a storage provider for insurance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FilecoinInsurance.sol\":\"FilecoinInsurance\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/FilecoinInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract FilecoinInsurance is Ownable {    \\n\\n    using SafeMath for uint256;\\n    uint256 private coverageAmount;\\n    uint256 private periodicPremium;\\n    uint256 private insuranceDuration;\\n    uint256 private minDurationBetweenPayments;\\n    uint256 private maxDurationBetweenPayments;\\n\\n    struct insuranceIssuee{\\n        bool isInsured;\\n        address payeeAddress;\\n        uint256 timesPremiumPaid;\\n        uint256 premiumStartTime;\\n        uint256 premiumEndTime;\\n        uint256 timeOfLastPremiumPayment;\\n        uint256 timeOfClaim;\\n        uint256 regularPremiumAmount;\\n        uint256 claimAmount;\\n        bool claimPaid;\\n    }\\n    mapping(address => insuranceIssuee) public insuranceIssuees;\\n\\n    // Events\\n    event PremiumPaid(\\n        uint256 indexed paidAmount,\\n        address indexed payeeAddress,\\n        uint256 indexed timeOfPayment\\n    );\\n\\n    event insuranceVariablesAdjusted(\\n        uint256 indexed coverageAmount,\\n        uint256 indexed periodicPremium,\\n        uint256 indexed insuranceDuration,\\n        uint256  minDurationBetweenPayments,\\n        uint256  maxDurationBetweenPayments\\n    );\\n\\n    constructor(\\n       uint256 _durationBetweenPayments,\\n       uint256 _insuranceDuration\\n    ){\\n        minDurationBetweenPayments=_durationBetweenPayments;\\n        maxDurationBetweenPayments=minDurationBetweenPayments.add(5 days);\\n        insuranceDuration=_insuranceDuration;\\n    }\\n\\n/**\\n * @notice Register a storage provider for insurance\\n * @dev Only owner can register a storage provider\\n * @param storageProvider Address of the storage provider\\n * @param _periodicPremium Amount of premium to be paid\\n * @param _claimAmount Amount of claim to be paid\\n */\\n    function registerStorageProvider(\\n        address storageProvider,\\n        uint256 _periodicPremium,\\n        uint256 _claimAmount\\n    ) public onlyOwner {\\n        require(insuranceIssuees[storageProvider].isInsured==false, \\\"Already registered\\\");\\n        insuranceIssuees[storageProvider].isInsured=true;\\n        insuranceIssuees[storageProvider].payeeAddress=storageProvider;\\n        insuranceIssuees[storageProvider].timesPremiumPaid=0;\\n        insuranceIssuees[storageProvider].premiumStartTime=block.timestamp;\\n        insuranceIssuees[storageProvider].premiumEndTime=block.timestamp.add(insuranceDuration);\\n        insuranceIssuees[storageProvider].regularPremiumAmount=_periodicPremium;\\n        insuranceIssuees[storageProvider].claimAmount=_claimAmount;\\n        insuranceIssuees[storageProvider].timeOfLastPremiumPayment=block.timestamp;\\n        insuranceIssuees[storageProvider].timeOfClaim=0;\\n        insuranceIssuees[storageProvider].claimAmount=0;\\n        insuranceIssuees[storageProvider].claimPaid=false;\\n    }\\n\\n/**\\n * @notice Check if the storage provider is eligible for insurance payment\\n * @dev internal function\\n * @param _issuee Address of the storage provider\\n */\\n    function isInsurancePaymentTime(address _issuee) internal view returns(bool) {\\n        uint256 timeOfLastPayment=insuranceIssuees[_issuee].timeOfLastPremiumPayment;\\n        uint256 currentTime=block.timestamp;\\n        uint256 timePassedSinceLastPayment=currentTime.sub(timeOfLastPayment);\\n        if(timePassedSinceLastPayment>=minDurationBetweenPayments && timePassedSinceLastPayment<=maxDurationBetweenPayments){\\n            return true;\\n        }\\n        else{\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if the storage provider has paid all previous premiums\\n     * @dev internal function\\n     * @param _issuee Address of the storage provider\\n     * @return bool\\n     */\\n    function hasPaidAllPreviousPremiums(address _issuee) internal view returns(bool) {\\n        uint timesPremiumPaid=insuranceIssuees[_issuee].timesPremiumPaid;\\n        uint256 insuranceStartTime=insuranceIssuees[_issuee].premiumStartTime;\\n        uint256 insuranceEndTime=insuranceIssuees[_issuee].premiumEndTime;  \\n        uint256 minimumDurationBetweenPayments=minDurationBetweenPayments;\\n        // Number of times premium should have been paid\\n        uint256 timesPremiumShouldHaveBeenPaid=insuranceEndTime.sub(insuranceStartTime).div(minimumDurationBetweenPayments);\\n        if(timesPremiumPaid==timesPremiumShouldHaveBeenPaid-1){\\n            return true;\\n        }\\n        else{\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if the storage provider's insurance is valid\\n     * @dev internal function\\n     * @param _issuee Address of the storage provider\\n     */\\n    function isInsuranceValid(address _issuee) internal view returns(bool) {\\n        uint256 currentTime=block.timestamp;\\n        uint256 insuranceEndTime=insuranceIssuees[_issuee].premiumEndTime;\\n        if(currentTime<=insuranceEndTime){\\n            return true;\\n        }\\n        else{\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if the storage provider is registered for insurance\\n     * @dev internal function\\n     * @param _issuee Address of the storage provider\\n     */\\n    function isRegisteredForInsurance(address _issuee) internal view returns(bool) {\\n        if(insuranceIssuees[_issuee].isInsured==true){\\n            return true;\\n        }\\n        else{\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if the premium payment is valid\\n     * @dev modifier\\n     * @param _issuee Address of the storage provider\\n     */\\n    modifier validPremiumPayment(address _issuee) {\\n        require(isRegisteredForInsurance(_issuee), \\\"Not registered\\\");\\n        require(isInsuranceValid(_issuee), \\\"Insurance expired\\\");\\n        require(isInsurancePaymentTime(_issuee), \\\"Premium payment time not reached\\\");\\n        require(hasPaidAllPreviousPremiums(_issuee), \\\"Previous premiums not paid\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Pay premium\\n     * @dev Only valid storage provider can pay premium\\n     */\\n    function getPremium() public payable validPremiumPayment(msg.sender) {\\n        require(msg.value==insuranceIssuees[msg.sender].regularPremiumAmount, \\\"Incorrect premium amount\\\");\\n\\n        insuranceIssuees[msg.sender].timesPremiumPaid=insuranceIssuees[msg.sender].timesPremiumPaid.add(1);\\n        insuranceIssuees[msg.sender].timeOfLastPremiumPayment=block.timestamp;\\n\\n        emit PremiumPaid(msg.value, msg.sender, block.timestamp);\\n    }\\n\\n\\n    \\n\\n}\\n\",\"keccak256\":\"0x07550a9303eddb00cea210ea236a6d81189d0631ba81c62f955f11ef475987e8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620016fc380380620016fc8339818101604052810190620000379190620001b6565b620000576200004b6200009260201b60201c565b6200009a60201b60201c565b816004819055506200007d620697806004546200015e60201b620009851790919060201c565b60058190555080600381905550505062000267565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081836200016e91906200022c565b905092915050565b600080fd5b6000819050919050565b62000190816200017b565b81146200019c57600080fd5b50565b600081519050620001b08162000185565b92915050565b60008060408385031215620001d057620001cf62000176565b5b6000620001e0858286016200019f565b9250506020620001f3858286016200019f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000239826200017b565b915062000246836200017b565b9250828201905080821115620002615762000260620001fd565b5b92915050565b61148580620002776000396000f3fe6080604052600436106100555760003560e01c8063715018a61461005a5780638da5cb5b14610071578063c97440291461009c578063f18e081c146100a6578063f2fde38b146100cf578063fa0f536f146100f8575b600080fd5b34801561006657600080fd5b5061006f61013e565b005b34801561007d57600080fd5b50610086610152565b6040516100939190610df9565b60405180910390f35b6100a461017b565b005b3480156100b257600080fd5b506100cd60048036038101906100c89190610e7b565b61044b565b005b3480156100db57600080fd5b506100f660048036038101906100f19190610ece565b610874565b005b34801561010457600080fd5b5061011f600480360381019061011a9190610ece565b6108f7565b6040516101359a99989796959493929190610f25565b60405180910390f35b61014661099b565b6101506000610a19565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3361018581610add565b6101c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bb9061101e565b60405180910390fd5b6101cd81610b4d565b61020c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102039061108a565b60405180910390fd5b61021581610bb8565b610254576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024b906110f6565b60405180910390fd5b61025d81610c4e565b61029c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029390611162565b60405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601543414610320576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610317906111ce565b60405180910390fd5b6103766001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461098590919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555042600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550423373ffffffffffffffffffffffffffffffffffffffff16347ffbf1458fbbddabb878de144276216e8ccda619cbac2d598e6ee37ff72173afb160405160405180910390a450565b61045361099b565b60001515600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515146104e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e09061123a565b60405180910390fd5b6001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555082600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555042600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506106696003544261098590919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006018190555080600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007018190555042600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401819055506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501819055506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701819055506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160006101000a81548160ff021916908315150217905550505050565b61087c61099b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e2906112cc565b60405180910390fd5b6108f481610a19565b50565b60066020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050154908060060154908060070154908060080160009054906101000a900460ff1690508a565b60008183610993919061131b565b905092915050565b6109a3610d84565b73ffffffffffffffffffffffffffffffffffffffff166109c1610152565b73ffffffffffffffffffffffffffffffffffffffff1614610a17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0e9061139b565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060011515600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16151503610b435760019050610b48565b600090505b919050565b6000804290506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050808211610bac57600192505050610bb3565b6000925050505b919050565b600080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154905060004290506000610c1a8383610d8c90919063ffffffff16565b90506004548110158015610c3057506005548111155b15610c415760019350505050610c49565b600093505050505b919050565b600080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015490506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050600060045490506000610d5282610d448686610d8c90919063ffffffff16565b610da290919063ffffffff16565b9050600181610d6191906113bb565b8503610d7557600195505050505050610d7f565b6000955050505050505b919050565b600033905090565b60008183610d9a91906113bb565b905092915050565b60008183610db0919061141e565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610de382610db8565b9050919050565b610df381610dd8565b82525050565b6000602082019050610e0e6000830184610dea565b92915050565b600080fd5b610e2281610dd8565b8114610e2d57600080fd5b50565b600081359050610e3f81610e19565b92915050565b6000819050919050565b610e5881610e45565b8114610e6357600080fd5b50565b600081359050610e7581610e4f565b92915050565b600080600060608486031215610e9457610e93610e14565b5b6000610ea286828701610e30565b9350506020610eb386828701610e66565b9250506040610ec486828701610e66565b9150509250925092565b600060208284031215610ee457610ee3610e14565b5b6000610ef284828501610e30565b91505092915050565b60008115159050919050565b610f1081610efb565b82525050565b610f1f81610e45565b82525050565b600061014082019050610f3b600083018d610f07565b610f48602083018c610dea565b610f55604083018b610f16565b610f62606083018a610f16565b610f6f6080830189610f16565b610f7c60a0830188610f16565b610f8960c0830187610f16565b610f9660e0830186610f16565b610fa4610100830185610f16565b610fb2610120830184610f07565b9b9a5050505050505050505050565b600082825260208201905092915050565b7f4e6f742072656769737465726564000000000000000000000000000000000000600082015250565b6000611008600e83610fc1565b915061101382610fd2565b602082019050919050565b6000602082019050818103600083015261103781610ffb565b9050919050565b7f496e737572616e63652065787069726564000000000000000000000000000000600082015250565b6000611074601183610fc1565b915061107f8261103e565b602082019050919050565b600060208201905081810360008301526110a381611067565b9050919050565b7f5072656d69756d207061796d656e742074696d65206e6f742072656163686564600082015250565b60006110e0602083610fc1565b91506110eb826110aa565b602082019050919050565b6000602082019050818103600083015261110f816110d3565b9050919050565b7f50726576696f7573207072656d69756d73206e6f742070616964000000000000600082015250565b600061114c601a83610fc1565b915061115782611116565b602082019050919050565b6000602082019050818103600083015261117b8161113f565b9050919050565b7f496e636f7272656374207072656d69756d20616d6f756e740000000000000000600082015250565b60006111b8601883610fc1565b91506111c382611182565b602082019050919050565b600060208201905081810360008301526111e7816111ab565b9050919050565b7f416c726561647920726567697374657265640000000000000000000000000000600082015250565b6000611224601283610fc1565b915061122f826111ee565b602082019050919050565b6000602082019050818103600083015261125381611217565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006112b6602683610fc1565b91506112c18261125a565b604082019050919050565b600060208201905081810360008301526112e5816112a9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061132682610e45565b915061133183610e45565b9250828201905080821115611349576113486112ec565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611385602083610fc1565b91506113908261134f565b602082019050919050565b600060208201905081810360008301526113b481611378565b9050919050565b60006113c682610e45565b91506113d183610e45565b92508282039050818111156113e9576113e86112ec565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061142982610e45565b915061143483610e45565b925082611444576114436113ef565b5b82820490509291505056fea2646970667358221220a90b4f49d37c06531e740db23f168127421a42c59bc22c2b60e8636a23a1840064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c8063715018a61461005a5780638da5cb5b14610071578063c97440291461009c578063f18e081c146100a6578063f2fde38b146100cf578063fa0f536f146100f8575b600080fd5b34801561006657600080fd5b5061006f61013e565b005b34801561007d57600080fd5b50610086610152565b6040516100939190610df9565b60405180910390f35b6100a461017b565b005b3480156100b257600080fd5b506100cd60048036038101906100c89190610e7b565b61044b565b005b3480156100db57600080fd5b506100f660048036038101906100f19190610ece565b610874565b005b34801561010457600080fd5b5061011f600480360381019061011a9190610ece565b6108f7565b6040516101359a99989796959493929190610f25565b60405180910390f35b61014661099b565b6101506000610a19565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3361018581610add565b6101c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bb9061101e565b60405180910390fd5b6101cd81610b4d565b61020c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102039061108a565b60405180910390fd5b61021581610bb8565b610254576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024b906110f6565b60405180910390fd5b61025d81610c4e565b61029c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029390611162565b60405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601543414610320576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610317906111ce565b60405180910390fd5b6103766001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461098590919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555042600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550423373ffffffffffffffffffffffffffffffffffffffff16347ffbf1458fbbddabb878de144276216e8ccda619cbac2d598e6ee37ff72173afb160405160405180910390a450565b61045361099b565b60001515600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515146104e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e09061123a565b60405180910390fd5b6001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555082600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555042600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506106696003544261098590919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006018190555080600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007018190555042600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401819055506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501819055506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701819055506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160006101000a81548160ff021916908315150217905550505050565b61087c61099b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e2906112cc565b60405180910390fd5b6108f481610a19565b50565b60066020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050154908060060154908060070154908060080160009054906101000a900460ff1690508a565b60008183610993919061131b565b905092915050565b6109a3610d84565b73ffffffffffffffffffffffffffffffffffffffff166109c1610152565b73ffffffffffffffffffffffffffffffffffffffff1614610a17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0e9061139b565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060011515600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16151503610b435760019050610b48565b600090505b919050565b6000804290506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050808211610bac57600192505050610bb3565b6000925050505b919050565b600080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154905060004290506000610c1a8383610d8c90919063ffffffff16565b90506004548110158015610c3057506005548111155b15610c415760019350505050610c49565b600093505050505b919050565b600080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015490506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050600060045490506000610d5282610d448686610d8c90919063ffffffff16565b610da290919063ffffffff16565b9050600181610d6191906113bb565b8503610d7557600195505050505050610d7f565b6000955050505050505b919050565b600033905090565b60008183610d9a91906113bb565b905092915050565b60008183610db0919061141e565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610de382610db8565b9050919050565b610df381610dd8565b82525050565b6000602082019050610e0e6000830184610dea565b92915050565b600080fd5b610e2281610dd8565b8114610e2d57600080fd5b50565b600081359050610e3f81610e19565b92915050565b6000819050919050565b610e5881610e45565b8114610e6357600080fd5b50565b600081359050610e7581610e4f565b92915050565b600080600060608486031215610e9457610e93610e14565b5b6000610ea286828701610e30565b9350506020610eb386828701610e66565b9250506040610ec486828701610e66565b9150509250925092565b600060208284031215610ee457610ee3610e14565b5b6000610ef284828501610e30565b91505092915050565b60008115159050919050565b610f1081610efb565b82525050565b610f1f81610e45565b82525050565b600061014082019050610f3b600083018d610f07565b610f48602083018c610dea565b610f55604083018b610f16565b610f62606083018a610f16565b610f6f6080830189610f16565b610f7c60a0830188610f16565b610f8960c0830187610f16565b610f9660e0830186610f16565b610fa4610100830185610f16565b610fb2610120830184610f07565b9b9a5050505050505050505050565b600082825260208201905092915050565b7f4e6f742072656769737465726564000000000000000000000000000000000000600082015250565b6000611008600e83610fc1565b915061101382610fd2565b602082019050919050565b6000602082019050818103600083015261103781610ffb565b9050919050565b7f496e737572616e63652065787069726564000000000000000000000000000000600082015250565b6000611074601183610fc1565b915061107f8261103e565b602082019050919050565b600060208201905081810360008301526110a381611067565b9050919050565b7f5072656d69756d207061796d656e742074696d65206e6f742072656163686564600082015250565b60006110e0602083610fc1565b91506110eb826110aa565b602082019050919050565b6000602082019050818103600083015261110f816110d3565b9050919050565b7f50726576696f7573207072656d69756d73206e6f742070616964000000000000600082015250565b600061114c601a83610fc1565b915061115782611116565b602082019050919050565b6000602082019050818103600083015261117b8161113f565b9050919050565b7f496e636f7272656374207072656d69756d20616d6f756e740000000000000000600082015250565b60006111b8601883610fc1565b91506111c382611182565b602082019050919050565b600060208201905081810360008301526111e7816111ab565b9050919050565b7f416c726561647920726567697374657265640000000000000000000000000000600082015250565b6000611224601283610fc1565b915061122f826111ee565b602082019050919050565b6000602082019050818103600083015261125381611217565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006112b6602683610fc1565b91506112c18261125a565b604082019050919050565b600060208201905081810360008301526112e5816112a9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061132682610e45565b915061133183610e45565b9250828201905080821115611349576113486112ec565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611385602083610fc1565b91506113908261134f565b602082019050919050565b600060208201905081810360008301526113b481611378565b9050919050565b60006113c682610e45565b91506113d183610e45565b92508282039050818111156113e9576113e86112ec565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061142982610e45565b915061143483610e45565b925082611444576114436113ef565b5b82820490509291505056fea2646970667358221220a90b4f49d37c06531e740db23f168127421a42c59bc22c2b60e8636a23a1840064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPremium()": {
        "details": "Only valid storage provider can pay premium"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerStorageProvider(address,uint256,uint256)": {
        "details": "Only owner can register a storage provider",
        "params": {
          "_claimAmount": "Amount of claim to be paid",
          "_periodicPremium": "Amount of premium to be paid",
          "storageProvider": "Address of the storage provider"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPremium()": {
        "notice": "Pay premium"
      },
      "registerStorageProvider(address,uint256,uint256)": {
        "notice": "Register a storage provider for insurance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 458,
        "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
        "label": "coverageAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 460,
        "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
        "label": "periodicPremium",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 462,
        "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
        "label": "insuranceDuration",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 464,
        "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
        "label": "minDurationBetweenPayments",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 466,
        "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
        "label": "maxDurationBetweenPayments",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 492,
        "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
        "label": "insuranceIssuees",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(insuranceIssuee)487_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(insuranceIssuee)487_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FilecoinInsurance.insuranceIssuee)",
        "numberOfBytes": "32",
        "value": "t_struct(insuranceIssuee)487_storage"
      },
      "t_struct(insuranceIssuee)487_storage": {
        "encoding": "inplace",
        "label": "struct FilecoinInsurance.insuranceIssuee",
        "members": [
          {
            "astId": 468,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "isInsured",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 470,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "payeeAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 472,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "timesPremiumPaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 474,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "premiumStartTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 476,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "premiumEndTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 478,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "timeOfLastPremiumPayment",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 480,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "timeOfClaim",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 482,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "regularPremiumAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 484,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "claimAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 486,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "claimPaid",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}