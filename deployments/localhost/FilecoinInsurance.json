{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_durationBetweenPayments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_insuranceDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_verifierAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payeeAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timeOfClaim",
          "type": "uint256"
        }
      ],
      "name": "ClaimPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payeeAddress",
          "type": "address"
        }
      ],
      "name": "ClaimRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "coverageAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "periodicPremium",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "insuranceDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minDurationBetweenPayments",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxDurationBetweenPayments",
          "type": "uint256"
        }
      ],
      "name": "InsuranceVariablesAdjusted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "paidAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payeeAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timeOfPayment",
          "type": "uint256"
        }
      ],
      "name": "PremiumPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "storageProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "periodicPremium",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        }
      ],
      "name": "StorageProviderReistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getDurationBetweenPayments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInsuranceDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "FILPrice",
          "type": "uint256"
        }
      ],
      "name": "getPremium",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_storageProvider",
          "type": "address"
        }
      ],
      "name": "getRegisteredStorageProvider",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isInsured",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "payeeAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timesPremiumPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "premiumStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "premiumEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeOfLastPremiumPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "regularPremiumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "claimPaid",
              "type": "bool"
            }
          ],
          "internalType": "struct FilecoinInsurance.insuranceIssuee",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "insuranceIssuees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isInsured",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "payeeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timesPremiumPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeOfLastPremiumPayment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "regularPremiumAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimPaid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "raiseClaimRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_storageProvider",
          "type": "address"
        }
      ],
      "name": "registerStorageProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1ec7e3bbbc611bfd308af40743b50f854ddbcb69ea7a240ce2c0f6253f2f961f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "2001188",
    "logsBloom": "0x
    "blockHash": "0xa90b38e7e9741d5e482d1dffeaac9f77e2710f59ba92ed6ed0fcd44731cd6d9e",
    "transactionHash": "0x1ec7e3bbbc611bfd308af40743b50f854ddbcb69ea7a240ce2c0f6253f2f961f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0x1ec7e3bbbc611bfd308af40743b50f854ddbcb69ea7a240ce2c0f6253f2f961f",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa90b38e7e9741d5e482d1dffeaac9f77e2710f59ba92ed6ed0fcd44731cd6d9e"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "2001188",
    "status": 1,
    "byzantium": true
  },
  "args": [
    2592000,
    31104000,
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  ],
  "numDeployments": 1,
  "solcInputHash": "0f08cd44f6e392161bf0c6407c8517bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationBetweenPayments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_insuranceDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_verifierAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payeeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeOfClaim\",\"type\":\"uint256\"}],\"name\":\"ClaimPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payeeAddress\",\"type\":\"address\"}],\"name\":\"ClaimRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"coverageAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"periodicPremium\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"insuranceDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDurationBetweenPayments\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDurationBetweenPayments\",\"type\":\"uint256\"}],\"name\":\"InsuranceVariablesAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payeeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeOfPayment\",\"type\":\"uint256\"}],\"name\":\"PremiumPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"storageProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"periodicPremium\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"name\":\"StorageProviderReistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getDurationBetweenPayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInsuranceDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"FILPrice\",\"type\":\"uint256\"}],\"name\":\"getPremium\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageProvider\",\"type\":\"address\"}],\"name\":\"getRegisteredStorageProvider\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isInsured\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"payeeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timesPremiumPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeOfLastPremiumPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"regularPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimPaid\",\"type\":\"bool\"}],\"internalType\":\"struct FilecoinInsurance.insuranceIssuee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"insuranceIssuees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isInsured\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"payeeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timesPremiumPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeOfLastPremiumPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"regularPremiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimPaid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raiseClaimRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageProvider\",\"type\":\"address\"}],\"name\":\"registerStorageProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Sets the coverage amount, periodic premium and insurance duration\",\"params\":{\"_durationBetweenPayments\":\"Minimum duration between payments\",\"_insuranceDuration\":\"Duration of the insurance\",\"_verifierAddress\":\"Address of the verifier contract\"}},\"getPremium(uint256)\":{\"details\":\"Only valid storage provider can pay premium\",\"params\":{\"FILPrice\":\"Current FIL price\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor for the contract\"},\"getPremium(uint256)\":{\"notice\":\"Pay premium\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FilecoinInsurance.sol\":\"FilecoinInsurance\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/FilecoinInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Verifier.sol\\\";\\n\\ncontract FilecoinInsurance is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    uint256 private coverageAmount;\\n    uint256 private periodicPremium;\\n    uint256 private insuranceDuration;\\n    uint256 private minDurationBetweenPayments;\\n    uint256 private maxDurationBetweenPayments;\\n    address private verifierAddress;\\n\\n    struct insuranceIssuee {\\n        bool isInsured;\\n        address payeeAddress;\\n        uint256 timesPremiumPaid;\\n        uint256 premiumStartTime;\\n        uint256 premiumEndTime;\\n        uint256 timeOfLastPremiumPayment;\\n        // Amount of premium to be paid in dollars (in wei)\\n        uint256 regularPremiumAmount;\\n        uint256 claimAmount;\\n        bool claimPaid;\\n    }\\n    mapping(address => insuranceIssuee) public insuranceIssuees;\\n\\n    // Events\\n    event ClaimRejected(\\n        uint256 indexed claimAmount,\\n        address indexed payeeAddress\\n    );\\n\\n    event ClaimPaid(\\n        uint256 indexed claimAmount,\\n        address indexed payeeAddress,\\n        uint256 indexed timeOfClaim\\n    );\\n\\n    event PremiumPaid(\\n        uint256 indexed paidAmount,\\n        address indexed payeeAddress,\\n        uint256 indexed timeOfPayment\\n    );\\n\\n    event InsuranceVariablesAdjusted(\\n        uint256 indexed coverageAmount,\\n        uint256 indexed periodicPremium,\\n        uint256 indexed insuranceDuration,\\n        uint256 minDurationBetweenPayments,\\n        uint256 maxDurationBetweenPayments\\n    );\\n\\n    event StorageProviderReistered(\\n        address indexed storageProvider,\\n        uint256 indexed periodicPremium,\\n        uint256 indexed claimAmount\\n    );\\n\\n    /**\\n     * @notice Constructor for the contract\\n     * @dev Sets the coverage amount, periodic premium and insurance duration\\n     * @param _durationBetweenPayments Minimum duration between payments\\n     * @param _insuranceDuration Duration of the insurance\\n     * @param _verifierAddress Address of the verifier contract\\n     */\\n    constructor(\\n        uint256 _durationBetweenPayments,\\n        uint256 _insuranceDuration,\\n        address _verifierAddress\\n    ) {\\n        minDurationBetweenPayments = _durationBetweenPayments;\\n        maxDurationBetweenPayments = minDurationBetweenPayments.add(5 days);\\n        insuranceDuration = _insuranceDuration;\\n        verifierAddress = _verifierAddress;\\n    }\\n\\n    /**\\n     * @notice Register a storage provider for insurance\\n     * @dev Only owner can register a storage provider\\n     * @param storageProvider Address of the storage provider\\n     * @param _periodicPremium Amount of premium to be paid\\n     * @param _claimAmount Amount of claim to be paid\\n     */\\n    function _registerStorageProvider(\\n        address storageProvider,\\n        uint256 _periodicPremium,\\n        uint256 _claimAmount\\n    ) internal {\\n        require(\\n            insuranceIssuees[storageProvider].isInsured == false,\\n            \\\"Already registered\\\"\\n        );\\n\\n        insuranceIssuees[storageProvider].isInsured = true;\\n        insuranceIssuees[storageProvider].payeeAddress = storageProvider;\\n\\n        insuranceIssuees[storageProvider].timesPremiumPaid = 0;\\n        insuranceIssuees[storageProvider].premiumStartTime = block.timestamp;\\n\\n        insuranceIssuees[storageProvider].premiumEndTime = block.timestamp.add(\\n            insuranceDuration\\n        );\\n\\n        insuranceIssuees[storageProvider]\\n            .regularPremiumAmount = _periodicPremium;\\n\\n        insuranceIssuees[storageProvider].claimAmount = _claimAmount;\\n\\n        insuranceIssuees[storageProvider].timeOfLastPremiumPayment = block\\n            .timestamp;\\n\\n        insuranceIssuees[storageProvider].claimPaid = false;\\n\\n        emit StorageProviderReistered(\\n            storageProvider,\\n            _periodicPremium,\\n            _claimAmount\\n        );\\n    }\\n\\n    function registerStorageProvider(\\n        address _storageProvider\\n    ) external onlyOwner {\\n        // TODO: get the premium and claim amount from the verifier\\n        uint256 _periodicPremium = IVerifier(verifierAddress).calculatePremium(\\n            _storageProvider\\n        );\\n        uint256 _claimAmount = IVerifier(verifierAddress).calculateClaimAmount(\\n            _storageProvider\\n        );\\n        _registerStorageProvider(\\n            _storageProvider,\\n            _periodicPremium,\\n            _claimAmount\\n        );\\n    }\\n\\n    /**\\n     * @notice Check if the storage provider is eligible for insurance payment\\n     * @dev internal function\\n     * @param _issuee Address of the storage provider\\n     */\\n    function isInsurancePaymentTime(\\n        address _issuee\\n    ) internal view returns (bool) {\\n        uint256 timeOfLastPayment = insuranceIssuees[_issuee]\\n            .timeOfLastPremiumPayment;\\n        uint256 currentTime = block.timestamp;\\n        uint256 timePassedSinceLastPayment = currentTime.sub(timeOfLastPayment);\\n\\n        if (\\n            timePassedSinceLastPayment >= minDurationBetweenPayments &&\\n            timePassedSinceLastPayment <= maxDurationBetweenPayments\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if the storage provider has paid all previous premiums\\n     * @dev internal function\\n     * @param _issuee Address of the storage provider\\n     * @return bool\\n     */\\n    function hasPaidAllPreviousPremiums(\\n        address _issuee\\n    ) internal view returns (bool) {\\n        uint timesPremiumPaid = insuranceIssuees[_issuee].timesPremiumPaid;\\n        uint256 insuranceStartTime = insuranceIssuees[_issuee].premiumStartTime;\\n        uint256 minimumDurationBetweenPayments = minDurationBetweenPayments;\\n        // Number of times premium should have been paid\\n        uint256 timesPremiumShouldHaveBeenPaid = block\\n            .timestamp\\n            .sub(insuranceStartTime)\\n            .div(minimumDurationBetweenPayments);\\n\\n        if (timesPremiumPaid == timesPremiumShouldHaveBeenPaid - 1) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if the storage provider's insurance is valid\\n     * @dev internal function\\n     * @param _issuee Address of the storage provider\\n     */\\n    function isInsuranceValid(address _issuee) internal view returns (bool) {\\n        uint256 currentTime = block.timestamp;\\n        uint256 insuranceEndTime = insuranceIssuees[_issuee].premiumEndTime;\\n\\n        if (currentTime < insuranceEndTime) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if the storage provider is registered for insurance\\n     * @dev internal function\\n     * @param _issuee Address of the storage provider\\n     */\\n    function isRegisteredForInsurance(\\n        address _issuee\\n    ) internal view returns (bool) {\\n        if (insuranceIssuees[_issuee].isInsured == true) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function calculatePayablePremium(\\n        uint256 FILPrice\\n    ) internal view returns (uint256) {\\n        uint256 premium = insuranceIssuees[msg.sender].regularPremiumAmount;\\n        uint256 payablePremium = premium.mul(FILPrice).div(10 ** 18);\\n        return payablePremium;\\n    }\\n\\n    /**\\n     * @notice Check if the premium payment is valid\\n     * @dev modifier\\n     * @param _issuee Address of the storage provider\\n     */\\n    modifier validPremiumPayment(address _issuee) {\\n        require(isRegisteredForInsurance(_issuee), \\\"Not registered\\\");\\n        require(isInsuranceValid(_issuee), \\\"Insurance expired\\\");\\n        require(\\n            isInsurancePaymentTime(_issuee),\\n            \\\"Premium payment time not reached\\\"\\n        );\\n        require(\\n            hasPaidAllPreviousPremiums(_issuee),\\n            \\\"Previous premiums not paid\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier requestForClaimValid(address _issuee) {\\n        require(isRegisteredForInsurance(_issuee), \\\"Not registered\\\");\\n        require(isInsuranceValid(_issuee), \\\"Insurance expired\\\");\\n        require(\\n            insuranceIssuees[_issuee].claimPaid == false,\\n            \\\"Claim already paid\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Pay premium\\n     * @dev Only valid storage provider can pay premium\\n     * @param FILPrice Current FIL price\\n     */\\n    function getPremium(\\n        uint256 FILPrice\\n    ) public payable validPremiumPayment(msg.sender) {\\n        uint256 payablePremium = calculatePayablePremium(FILPrice);\\n        require(msg.value == payablePremium, \\\"Incorrect premium amount\\\");\\n\\n        insuranceIssuees[msg.sender].timesPremiumPaid = insuranceIssuees[\\n            msg.sender\\n        ].timesPremiumPaid.add(1);\\n        insuranceIssuees[msg.sender].timeOfLastPremiumPayment = block.timestamp;\\n\\n        emit PremiumPaid(msg.value, msg.sender, block.timestamp);\\n    }\\n\\n\\n\\n    function raiseClaimRequest() public nonReentrant requestForClaimValid(msg.sender) {\\n        \\n        require(insuranceIssuees[msg.sender].claimPaid==false, \\\"Claim already paid\\\");\\n        bool isClaimValid = IVerifier(verifierAddress).isClaimValid(msg.sender);\\n        if (isClaimValid) {\\n            insuranceIssuees[msg.sender].claimPaid = true;\\n\\n            (bool success, ) = payable(msg.sender).call{value: insuranceIssuees[msg.sender].claimAmount}(\\\"\\\");\\n            require(success, \\\"Transfer failed.\\\");\\n\\n            emit ClaimPaid(\\n                insuranceIssuees[msg.sender].claimAmount,\\n                msg.sender,\\n                block.timestamp\\n            );\\n\\n        } else {\\n            emit ClaimRejected(\\n                insuranceIssuees[msg.sender].claimAmount,\\n                msg.sender\\n            );\\n        }\\n    }\\n\\n    // getter functions\\n    function getDurationBetweenPayments() public view returns (uint256) {\\n        return minDurationBetweenPayments;\\n    }\\n\\n    function getInsuranceDuration() public view returns (uint256) {\\n        return insuranceDuration;\\n    }\\n\\n    function getRegisteredStorageProvider(\\n        address _storageProvider\\n    ) public view returns (insuranceIssuee memory) {\\n        return insuranceIssuees[_storageProvider];\\n    }\\n}\\n\",\"keccak256\":\"0xb05c5b7cf1c1903a521c0b40245dc5fb6d93de0d52b2907057cf3474d6d30867\",\"license\":\"MIT\"},\"contracts/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"./mocks/InterfaceQueryAPI.sol\\\";\\n\\ninterface IVerifier {\\n    function verifyMinerData() external returns (bool);\\n    function verifyMinorBenificiary() external returns (bool);\\n    function calculatePremium(address _minorAddress) external returns (uint256);\\n    function calculateClaimAmount(address _minorAddress) external returns (uint256);\\n    function isClaimValid(address _minorAddress) external returns (bool);\\n}\\n\\n\\ncontract Verifier{\\n\\n    address public queryAPIAddress;\\n    \\n    constructor(address _queryAPIAddress){\\n        queryAPIAddress = _queryAPIAddress;\\n    }\\n\\n    /**\\n     * @notice Verifies the miner data\\n     * @return bool\\n     */\\n    function verifyMinerData() internal view returns (bool){\\n        IQueryAPI queryAPI = IQueryAPI(queryAPIAddress);\\n        IQueryAPI.minerInfo memory minerInfo = queryAPI.getMinerInfo(msg.sender);\\n        //   TODO : Add the logic to verify the miner data\\n        return true;\\n    }\\n\\n    /**\\n     * @notice calculates the premium to be paid based on the miner data\\n     * @return bool\\n     */\\n    function calculatePremium(address _minorAddress) external view returns (uint256){\\n        // TODO : Add the logic to calculate the premium\\n        return 100 ether;\\n    }\\n\\n    /**\\n     * @notice calculates the claimAmount to be paid based on the miner data\\n     * @return bool\\n     */\\n    function calculateClaimAmount(address _minorAddress) external view returns (uint256){\\n        // TODO : Add the logic to calculate the claim amount\\n        return 1000 ether;\\n    }\\n\\n    /**\\n     * @notice Verifies the minor benificiary\\n     * @return bool\\n     */\\n    function verifyMinorBenificiary() internal view returns (bool){\\n        IQueryAPI queryAPI = IQueryAPI(queryAPIAddress);\\n        return queryAPI.confirmBenificiaryAddress();\\n    }\\n\\n    function isClaimValid(address _minorAddress) external view returns (bool){\\n        // TODO : Add the logic to verify the claim\\n        bool isMinorBenificiary= verifyMinorBenificiary();\\n        bool isMinerDataValid = verifyMinerData();\\n        return isMinorBenificiary && isMinerDataValid;\\n    }\\n}\",\"keccak256\":\"0x4924907b203cbca44b9c6da2b99a24e97ad6e906ddc1c6ec41dafc11606b9f17\",\"license\":\"MIT\"},\"contracts/mocks/InterfaceQueryAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQueryAPI {\\n    struct minerInfo {\\n        address minerAddress;\\n        uint addressTotalBalance;\\n        uint initialPledge;\\n        uint lockedBlockRewards;\\n        uint activeSectors;\\n        uint faultySectors;\\n        uint recoveredSectors;\\n    }\\n\\n    function confirmBenificiaryAddress() external pure returns (bool);\\n\\n    function getMinerInfo(\\n        address minerAddress\\n    ) external view returns (minerInfo memory);\\n\\n    function mockGenerateMinerInfo(address _minerAddress) external;\\n}\\n\",\"keccak256\":\"0xc2cdfde348b31a9a131f7c47d7b3803193a281f220d599f31bc21b1fdf83bab2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620023ee380380620023ee833981810160405281019062000037919062000264565b620000576200004b620000db60201b60201c565b620000e360201b60201c565b60018081905550826005819055506200008462069780600554620001a760201b62000d821790919060201c565b6006819055508160048190555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506200032a565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008183620001b79190620002ef565b905092915050565b600080fd5b6000819050919050565b620001d981620001c4565b8114620001e557600080fd5b50565b600081519050620001f981620001ce565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022c82620001ff565b9050919050565b6200023e816200021f565b81146200024a57600080fd5b50565b6000815190506200025e8162000233565b92915050565b60008060006060848603121562000280576200027f620001bf565b5b60006200029086828701620001e8565b9350506020620002a386828701620001e8565b9250506040620002b6868287016200024d565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620002fc82620001c4565b91506200030983620001c4565b9250828201905080821115620003245762000323620002c0565b5b92915050565b6120b4806200033a6000396000f3fe6080604052600436106100915760003560e01c80638da5cb5b116100595780638da5cb5b1461015a578063ec979d9f14610185578063f2fde38b1461019c578063f619fb83146101c5578063fa0f536f146101f057610091565b80631428a119146100965780631bf1fffb146100bf5780633fe3c3d5146100db578063491c129a14610118578063715018a614610143575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b891906116fd565b610235565b005b6100d960048036038101906100d49190611760565b610391565b005b3480156100e757600080fd5b5061010260048036038101906100fd91906116fd565b61062e565b60405161010f919061187d565b60405180910390f35b34801561012457600080fd5b5061012d610750565b60405161013a91906118a8565b60405180910390f35b34801561014f57600080fd5b5061015861075a565b005b34801561016657600080fd5b5061016f61076e565b60405161017c91906118d2565b60405180910390f35b34801561019157600080fd5b5061019a610797565b005b3480156101a857600080fd5b506101c360048036038101906101be91906116fd565b610c6d565b005b3480156101d157600080fd5b506101da610cf0565b6040516101e791906118a8565b60405180910390f35b3480156101fc57600080fd5b50610217600480360381019061021291906116fd565b610cfa565b60405161022c999897969594939291906118fc565b60405180910390f35b61023d610d98565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166374f22010836040518263ffffffff1660e01b815260040161029a91906118d2565b6020604051808303816000875af11580156102b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dd919061199e565b90506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a40d1cbd846040518263ffffffff1660e01b815260040161033c91906118d2565b6020604051808303816000875af115801561035b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037f919061199e565b905061038c838383610e16565b505050565b3361039b816111ec565b6103da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d190611a28565b60405180910390fd5b6103e38161125c565b610422576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041990611a94565b60405180910390fd5b61042b816112c8565b61046a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046190611b00565b60405180910390fd5b6104738161135e565b6104b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a990611b6c565b60405180910390fd5b60006104bd8361144b565b9050803414610501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f890611bd8565b60405180910390fd5b6105576001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610d8290919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555042600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550423373ffffffffffffffffffffffffffffffffffffffff16347ffbf1458fbbddabb878de144276216e8ccda619cbac2d598e6ee37ff72173afb160405160405180910390a4505050565b610636611634565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101200160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff1615151515815250509050919050565b6000600454905090565b610762610d98565b61076c60006114ce565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61079f611592565b336107a9816111ec565b6107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107df90611a28565b60405180910390fd5b6107f18161125c565b610830576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082790611a94565b60405180910390fd5b60001515600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff161515146108c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bd90611c44565b60405180910390fd5b60001515600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff1615151461095c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095390611c44565b60405180910390fd5b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166316f65d80336040518263ffffffff1660e01b81526004016109b991906118d2565b6020604051808303816000875af11580156109d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fc9190611c90565b90508015610bda576001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160006101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff16600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060154604051610ac790611cee565b60006040518083038185875af1925050503d8060008114610b04576040519150601f19603f3d011682016040523d82523d6000602084013e610b09565b606091505b5050905080610b4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4490611d4f565b60405180910390fd5b423373ffffffffffffffffffffffffffffffffffffffff16600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601547faf3c8fdd75d667f71d36d7840b8ef9086c516c9b047ad6a83a5a66151342123a60405160405180910390a450610c61565b3373ffffffffffffffffffffffffffffffffffffffff16600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601547f22fadfffa9b3978ef60c97c46a0e6c38040d03db462e6cec7e09cff08c0aa41460405160405180910390a35b5050610c6b6115e1565b565b610c75610d98565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ce4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdb90611de1565b60405180910390fd5b610ced816114ce565b50565b6000600554905090565b60086020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050154908060060154908060070160009054906101000a900460ff16905089565b60008183610d909190611e30565b905092915050565b610da06115ea565b73ffffffffffffffffffffffffffffffffffffffff16610dbe61076e565b73ffffffffffffffffffffffffffffffffffffffff1614610e14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0b90611eb0565b60405180910390fd5b565b60001515600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16151514610eac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea390611f1c565b60405180910390fd5b6001600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555082600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555042600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555061102c60045442610d8290919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555081600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005018190555080600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006018190555042600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401819055506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160006101000a81548160ff02191690831515021790555080828473ffffffffffffffffffffffffffffffffffffffff167f82836817c2b3e7521f50f18c4585b1cfd9d6b9df32f4e2efc305f98c926c05f260405160405180910390a4505050565b600060011515600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515036112525760019050611257565b600090505b919050565b6000804290506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050808210156112bc576001925050506112c3565b6000925050505b919050565b600080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015490506000429050600061132a83836115f290919063ffffffff16565b9050600554811015801561134057506006548111155b156113515760019350505050611359565b600093505050505b919050565b600080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154905060006005549050600061141b8261140d85426115f290919063ffffffff16565b61160890919063ffffffff16565b905060018161142a9190611f3c565b840361143d576001945050505050611446565b60009450505050505b919050565b600080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154905060006114c2670de0b6b3a76400006114b4868561161e90919063ffffffff16565b61160890919063ffffffff16565b90508092505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6002600154036115d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ce90611fbc565b60405180910390fd5b6002600181905550565b60018081905550565b600033905090565b600081836116009190611f3c565b905092915050565b60008183611616919061200b565b905092915050565b6000818361162c919061203c565b905092915050565b604051806101200160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116ca8261169f565b9050919050565b6116da816116bf565b81146116e557600080fd5b50565b6000813590506116f7816116d1565b92915050565b6000602082840312156117135761171261169a565b5b6000611721848285016116e8565b91505092915050565b6000819050919050565b61173d8161172a565b811461174857600080fd5b50565b60008135905061175a81611734565b92915050565b6000602082840312156117765761177561169a565b5b60006117848482850161174b565b91505092915050565b60008115159050919050565b6117a28161178d565b82525050565b6117b1816116bf565b82525050565b6117c08161172a565b82525050565b610120820160008201516117dd6000850182611799565b5060208201516117f060208501826117a8565b50604082015161180360408501826117b7565b50606082015161181660608501826117b7565b50608082015161182960808501826117b7565b5060a082015161183c60a08501826117b7565b5060c082015161184f60c08501826117b7565b5060e082015161186260e08501826117b7565b50610100820151611877610100850182611799565b50505050565b60006101208201905061189360008301846117c6565b92915050565b6118a28161172a565b82525050565b60006020820190506118bd6000830184611899565b92915050565b6118cc816116bf565b82525050565b60006020820190506118e760008301846118c3565b92915050565b6118f68161178d565b82525050565b600061012082019050611912600083018c6118ed565b61191f602083018b6118c3565b61192c604083018a611899565b6119396060830189611899565b6119466080830188611899565b61195360a0830187611899565b61196060c0830186611899565b61196d60e0830185611899565b61197b6101008301846118ed565b9a9950505050505050505050565b60008151905061199881611734565b92915050565b6000602082840312156119b4576119b361169a565b5b60006119c284828501611989565b91505092915050565b600082825260208201905092915050565b7f4e6f742072656769737465726564000000000000000000000000000000000000600082015250565b6000611a12600e836119cb565b9150611a1d826119dc565b602082019050919050565b60006020820190508181036000830152611a4181611a05565b9050919050565b7f496e737572616e63652065787069726564000000000000000000000000000000600082015250565b6000611a7e6011836119cb565b9150611a8982611a48565b602082019050919050565b60006020820190508181036000830152611aad81611a71565b9050919050565b7f5072656d69756d207061796d656e742074696d65206e6f742072656163686564600082015250565b6000611aea6020836119cb565b9150611af582611ab4565b602082019050919050565b60006020820190508181036000830152611b1981611add565b9050919050565b7f50726576696f7573207072656d69756d73206e6f742070616964000000000000600082015250565b6000611b56601a836119cb565b9150611b6182611b20565b602082019050919050565b60006020820190508181036000830152611b8581611b49565b9050919050565b7f496e636f7272656374207072656d69756d20616d6f756e740000000000000000600082015250565b6000611bc26018836119cb565b9150611bcd82611b8c565b602082019050919050565b60006020820190508181036000830152611bf181611bb5565b9050919050565b7f436c61696d20616c726561647920706169640000000000000000000000000000600082015250565b6000611c2e6012836119cb565b9150611c3982611bf8565b602082019050919050565b60006020820190508181036000830152611c5d81611c21565b9050919050565b611c6d8161178d565b8114611c7857600080fd5b50565b600081519050611c8a81611c64565b92915050565b600060208284031215611ca657611ca561169a565b5b6000611cb484828501611c7b565b91505092915050565b600081905092915050565b50565b6000611cd8600083611cbd565b9150611ce382611cc8565b600082019050919050565b6000611cf982611ccb565b9150819050919050565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b6000611d396010836119cb565b9150611d4482611d03565b602082019050919050565b60006020820190508181036000830152611d6881611d2c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611dcb6026836119cb565b9150611dd682611d6f565b604082019050919050565b60006020820190508181036000830152611dfa81611dbe565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e3b8261172a565b9150611e468361172a565b9250828201905080821115611e5e57611e5d611e01565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611e9a6020836119cb565b9150611ea582611e64565b602082019050919050565b60006020820190508181036000830152611ec981611e8d565b9050919050565b7f416c726561647920726567697374657265640000000000000000000000000000600082015250565b6000611f066012836119cb565b9150611f1182611ed0565b602082019050919050565b60006020820190508181036000830152611f3581611ef9565b9050919050565b6000611f478261172a565b9150611f528361172a565b9250828203905081811115611f6a57611f69611e01565b5b92915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611fa6601f836119cb565b9150611fb182611f70565b602082019050919050565b60006020820190508181036000830152611fd581611f99565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006120168261172a565b91506120218361172a565b92508261203157612030611fdc565b5b828204905092915050565b60006120478261172a565b91506120528361172a565b92508282026120608161172a565b9150828204841483151761207757612076611e01565b5b509291505056fea264697066735822122015e9a633873f5df9e0832d4bd1fc8a29041ff4fecf56b86d3d882396ce06e94a64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c80638da5cb5b116100595780638da5cb5b1461015a578063ec979d9f14610185578063f2fde38b1461019c578063f619fb83146101c5578063fa0f536f146101f057610091565b80631428a119146100965780631bf1fffb146100bf5780633fe3c3d5146100db578063491c129a14610118578063715018a614610143575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b891906116fd565b610235565b005b6100d960048036038101906100d49190611760565b610391565b005b3480156100e757600080fd5b5061010260048036038101906100fd91906116fd565b61062e565b60405161010f919061187d565b60405180910390f35b34801561012457600080fd5b5061012d610750565b60405161013a91906118a8565b60405180910390f35b34801561014f57600080fd5b5061015861075a565b005b34801561016657600080fd5b5061016f61076e565b60405161017c91906118d2565b60405180910390f35b34801561019157600080fd5b5061019a610797565b005b3480156101a857600080fd5b506101c360048036038101906101be91906116fd565b610c6d565b005b3480156101d157600080fd5b506101da610cf0565b6040516101e791906118a8565b60405180910390f35b3480156101fc57600080fd5b50610217600480360381019061021291906116fd565b610cfa565b60405161022c999897969594939291906118fc565b60405180910390f35b61023d610d98565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166374f22010836040518263ffffffff1660e01b815260040161029a91906118d2565b6020604051808303816000875af11580156102b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dd919061199e565b90506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a40d1cbd846040518263ffffffff1660e01b815260040161033c91906118d2565b6020604051808303816000875af115801561035b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037f919061199e565b905061038c838383610e16565b505050565b3361039b816111ec565b6103da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d190611a28565b60405180910390fd5b6103e38161125c565b610422576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041990611a94565b60405180910390fd5b61042b816112c8565b61046a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046190611b00565b60405180910390fd5b6104738161135e565b6104b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a990611b6c565b60405180910390fd5b60006104bd8361144b565b9050803414610501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f890611bd8565b60405180910390fd5b6105576001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610d8290919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555042600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550423373ffffffffffffffffffffffffffffffffffffffff16347ffbf1458fbbddabb878de144276216e8ccda619cbac2d598e6ee37ff72173afb160405160405180910390a4505050565b610636611634565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101200160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff1615151515815250509050919050565b6000600454905090565b610762610d98565b61076c60006114ce565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61079f611592565b336107a9816111ec565b6107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107df90611a28565b60405180910390fd5b6107f18161125c565b610830576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082790611a94565b60405180910390fd5b60001515600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff161515146108c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bd90611c44565b60405180910390fd5b60001515600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff1615151461095c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095390611c44565b60405180910390fd5b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166316f65d80336040518263ffffffff1660e01b81526004016109b991906118d2565b6020604051808303816000875af11580156109d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fc9190611c90565b90508015610bda576001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160006101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff16600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060154604051610ac790611cee565b60006040518083038185875af1925050503d8060008114610b04576040519150601f19603f3d011682016040523d82523d6000602084013e610b09565b606091505b5050905080610b4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4490611d4f565b60405180910390fd5b423373ffffffffffffffffffffffffffffffffffffffff16600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601547faf3c8fdd75d667f71d36d7840b8ef9086c516c9b047ad6a83a5a66151342123a60405160405180910390a450610c61565b3373ffffffffffffffffffffffffffffffffffffffff16600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601547f22fadfffa9b3978ef60c97c46a0e6c38040d03db462e6cec7e09cff08c0aa41460405160405180910390a35b5050610c6b6115e1565b565b610c75610d98565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ce4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdb90611de1565b60405180910390fd5b610ced816114ce565b50565b6000600554905090565b60086020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050154908060060154908060070160009054906101000a900460ff16905089565b60008183610d909190611e30565b905092915050565b610da06115ea565b73ffffffffffffffffffffffffffffffffffffffff16610dbe61076e565b73ffffffffffffffffffffffffffffffffffffffff1614610e14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0b90611eb0565b60405180910390fd5b565b60001515600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16151514610eac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea390611f1c565b60405180910390fd5b6001600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555082600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555042600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555061102c60045442610d8290919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555081600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005018190555080600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006018190555042600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401819055506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070160006101000a81548160ff02191690831515021790555080828473ffffffffffffffffffffffffffffffffffffffff167f82836817c2b3e7521f50f18c4585b1cfd9d6b9df32f4e2efc305f98c926c05f260405160405180910390a4505050565b600060011515600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515036112525760019050611257565b600090505b919050565b6000804290506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050808210156112bc576001925050506112c3565b6000925050505b919050565b600080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015490506000429050600061132a83836115f290919063ffffffff16565b9050600554811015801561134057506006548111155b156113515760019350505050611359565b600093505050505b919050565b600080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154905060006005549050600061141b8261140d85426115f290919063ffffffff16565b61160890919063ffffffff16565b905060018161142a9190611f3c565b840361143d576001945050505050611446565b60009450505050505b919050565b600080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154905060006114c2670de0b6b3a76400006114b4868561161e90919063ffffffff16565b61160890919063ffffffff16565b90508092505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6002600154036115d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ce90611fbc565b60405180910390fd5b6002600181905550565b60018081905550565b600033905090565b600081836116009190611f3c565b905092915050565b60008183611616919061200b565b905092915050565b6000818361162c919061203c565b905092915050565b604051806101200160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116ca8261169f565b9050919050565b6116da816116bf565b81146116e557600080fd5b50565b6000813590506116f7816116d1565b92915050565b6000602082840312156117135761171261169a565b5b6000611721848285016116e8565b91505092915050565b6000819050919050565b61173d8161172a565b811461174857600080fd5b50565b60008135905061175a81611734565b92915050565b6000602082840312156117765761177561169a565b5b60006117848482850161174b565b91505092915050565b60008115159050919050565b6117a28161178d565b82525050565b6117b1816116bf565b82525050565b6117c08161172a565b82525050565b610120820160008201516117dd6000850182611799565b5060208201516117f060208501826117a8565b50604082015161180360408501826117b7565b50606082015161181660608501826117b7565b50608082015161182960808501826117b7565b5060a082015161183c60a08501826117b7565b5060c082015161184f60c08501826117b7565b5060e082015161186260e08501826117b7565b50610100820151611877610100850182611799565b50505050565b60006101208201905061189360008301846117c6565b92915050565b6118a28161172a565b82525050565b60006020820190506118bd6000830184611899565b92915050565b6118cc816116bf565b82525050565b60006020820190506118e760008301846118c3565b92915050565b6118f68161178d565b82525050565b600061012082019050611912600083018c6118ed565b61191f602083018b6118c3565b61192c604083018a611899565b6119396060830189611899565b6119466080830188611899565b61195360a0830187611899565b61196060c0830186611899565b61196d60e0830185611899565b61197b6101008301846118ed565b9a9950505050505050505050565b60008151905061199881611734565b92915050565b6000602082840312156119b4576119b361169a565b5b60006119c284828501611989565b91505092915050565b600082825260208201905092915050565b7f4e6f742072656769737465726564000000000000000000000000000000000000600082015250565b6000611a12600e836119cb565b9150611a1d826119dc565b602082019050919050565b60006020820190508181036000830152611a4181611a05565b9050919050565b7f496e737572616e63652065787069726564000000000000000000000000000000600082015250565b6000611a7e6011836119cb565b9150611a8982611a48565b602082019050919050565b60006020820190508181036000830152611aad81611a71565b9050919050565b7f5072656d69756d207061796d656e742074696d65206e6f742072656163686564600082015250565b6000611aea6020836119cb565b9150611af582611ab4565b602082019050919050565b60006020820190508181036000830152611b1981611add565b9050919050565b7f50726576696f7573207072656d69756d73206e6f742070616964000000000000600082015250565b6000611b56601a836119cb565b9150611b6182611b20565b602082019050919050565b60006020820190508181036000830152611b8581611b49565b9050919050565b7f496e636f7272656374207072656d69756d20616d6f756e740000000000000000600082015250565b6000611bc26018836119cb565b9150611bcd82611b8c565b602082019050919050565b60006020820190508181036000830152611bf181611bb5565b9050919050565b7f436c61696d20616c726561647920706169640000000000000000000000000000600082015250565b6000611c2e6012836119cb565b9150611c3982611bf8565b602082019050919050565b60006020820190508181036000830152611c5d81611c21565b9050919050565b611c6d8161178d565b8114611c7857600080fd5b50565b600081519050611c8a81611c64565b92915050565b600060208284031215611ca657611ca561169a565b5b6000611cb484828501611c7b565b91505092915050565b600081905092915050565b50565b6000611cd8600083611cbd565b9150611ce382611cc8565b600082019050919050565b6000611cf982611ccb565b9150819050919050565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b6000611d396010836119cb565b9150611d4482611d03565b602082019050919050565b60006020820190508181036000830152611d6881611d2c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611dcb6026836119cb565b9150611dd682611d6f565b604082019050919050565b60006020820190508181036000830152611dfa81611dbe565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e3b8261172a565b9150611e468361172a565b9250828201905080821115611e5e57611e5d611e01565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611e9a6020836119cb565b9150611ea582611e64565b602082019050919050565b60006020820190508181036000830152611ec981611e8d565b9050919050565b7f416c726561647920726567697374657265640000000000000000000000000000600082015250565b6000611f066012836119cb565b9150611f1182611ed0565b602082019050919050565b60006020820190508181036000830152611f3581611ef9565b9050919050565b6000611f478261172a565b9150611f528361172a565b9250828203905081811115611f6a57611f69611e01565b5b92915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611fa6601f836119cb565b9150611fb182611f70565b602082019050919050565b60006020820190508181036000830152611fd581611f99565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006120168261172a565b91506120218361172a565b92508261203157612030611fdc565b5b828204905092915050565b60006120478261172a565b91506120528361172a565b92508282026120608161172a565b9150828204841483151761207757612076611e01565b5b509291505056fea264697066735822122015e9a633873f5df9e0832d4bd1fc8a29041ff4fecf56b86d3d882396ce06e94a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Sets the coverage amount, periodic premium and insurance duration",
        "params": {
          "_durationBetweenPayments": "Minimum duration between payments",
          "_insuranceDuration": "Duration of the insurance",
          "_verifierAddress": "Address of the verifier contract"
        }
      },
      "getPremium(uint256)": {
        "details": "Only valid storage provider can pay premium",
        "params": {
          "FILPrice": "Current FIL price"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor for the contract"
      },
      "getPremium(uint256)": {
        "notice": "Pay premium"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 516,
        "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
        "label": "coverageAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 518,
        "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
        "label": "periodicPremium",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 520,
        "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
        "label": "insuranceDuration",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 522,
        "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
        "label": "minDurationBetweenPayments",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 524,
        "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
        "label": "maxDurationBetweenPayments",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 526,
        "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
        "label": "verifierAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 550,
        "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
        "label": "insuranceIssuees",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(insuranceIssuee)545_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(insuranceIssuee)545_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FilecoinInsurance.insuranceIssuee)",
        "numberOfBytes": "32",
        "value": "t_struct(insuranceIssuee)545_storage"
      },
      "t_struct(insuranceIssuee)545_storage": {
        "encoding": "inplace",
        "label": "struct FilecoinInsurance.insuranceIssuee",
        "members": [
          {
            "astId": 528,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "isInsured",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 530,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "payeeAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 532,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "timesPremiumPaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 534,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "premiumStartTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 536,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "premiumEndTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 538,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "timeOfLastPremiumPayment",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 540,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "regularPremiumAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 542,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "claimAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 544,
            "contract": "contracts/FilecoinInsurance.sol:FilecoinInsurance",
            "label": "claimPaid",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}