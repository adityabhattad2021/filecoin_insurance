{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/FilecoinInsurance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./Verifier.sol\";\n\ncontract FilecoinInsurance is Ownable {\n    using SafeMath for uint256;\n    uint256 private coverageAmount;\n    uint256 private periodicPremium;\n    uint256 private insuranceDuration;\n    uint256 private minDurationBetweenPayments;\n    uint256 private maxDurationBetweenPayments;\n\n    struct insuranceIssuee {\n        bool isInsured;\n        address payeeAddress;\n        uint256 timesPremiumPaid;\n        uint256 premiumStartTime;\n        uint256 premiumEndTime;\n        uint256 timeOfLastPremiumPayment;\n        // Amount of premium to be paid in dollars (in wei)\n        uint256 regularPremiumAmount;\n        uint256 claimAmount;\n        bool claimPaid;\n    }\n    mapping(address => insuranceIssuee) public insuranceIssuees;\n\n    // Events\n    event ClaimRequested(\n        uint256 indexed claimAmount,\n        address indexed payeeAddress\n    );\n\n    event ClaimPaid(\n        uint256 indexed claimAmount,\n        address indexed payeeAddress,\n        uint256 indexed timeOfClaim\n    );\n\n    event PremiumPaid(\n        uint256 indexed paidAmount,\n        address indexed payeeAddress,\n        uint256 indexed timeOfPayment\n    );\n\n    event InsuranceVariablesAdjusted(\n        uint256 indexed coverageAmount,\n        uint256 indexed periodicPremium,\n        uint256 indexed insuranceDuration,\n        uint256 minDurationBetweenPayments,\n        uint256 maxDurationBetweenPayments\n    );\n\n    event StorageProviderReistered(\n        address indexed storageProvider,\n        uint256 indexed periodicPremium,\n        uint256 indexed claimAmount\n    );\n\n    constructor(uint256 _durationBetweenPayments, uint256 _insuranceDuration) {\n        minDurationBetweenPayments = _durationBetweenPayments;\n        maxDurationBetweenPayments = minDurationBetweenPayments.add(5 days);\n        insuranceDuration = _insuranceDuration;\n    }\n\n    /**\n     * @notice Register a storage provider for insurance\n     * @dev Only owner can register a storage provider\n     * @param storageProvider Address of the storage provider\n     * @param _periodicPremium Amount of premium to be paid\n     * @param _claimAmount Amount of claim to be paid\n     */\n    function _registerStorageProvider(\n        address storageProvider,\n        uint256 _periodicPremium,\n        uint256 _claimAmount\n    ) internal {\n        require(\n            insuranceIssuees[storageProvider].isInsured == false,\n            \"Already registered\"\n        );\n\n        insuranceIssuees[storageProvider].isInsured = true;\n        insuranceIssuees[storageProvider].payeeAddress = storageProvider;\n\n        insuranceIssuees[storageProvider].timesPremiumPaid = 0;\n        insuranceIssuees[storageProvider].premiumStartTime = block.timestamp;\n\n        insuranceIssuees[storageProvider].premiumEndTime = block.timestamp.add(\n            insuranceDuration\n        );\n\n        insuranceIssuees[storageProvider]\n            .regularPremiumAmount = _periodicPremium;\n\n        insuranceIssuees[storageProvider].claimAmount = _claimAmount;\n\n        insuranceIssuees[storageProvider].timeOfLastPremiumPayment = block\n            .timestamp;\n\n        insuranceIssuees[storageProvider].claimPaid = false;\n\n        emit StorageProviderReistered(\n            storageProvider,\n            _periodicPremium,\n            _claimAmount\n        );\n    }\n\n    function registerStorageProvider(\n        address storageProvider,\n        uint256 _periodicPremium,\n        uint256 _claimAmount\n    ) external onlyOwner {\n        // TODO: get the premium and claim amount from the verifier\n        _registerStorageProvider(\n            storageProvider,\n            _periodicPremium,\n            _claimAmount\n        );\n    }\n\n    /**\n     * @notice Check if the storage provider is eligible for insurance payment\n     * @dev internal function\n     * @param _issuee Address of the storage provider\n     */\n    function isInsurancePaymentTime(\n        address _issuee\n    ) internal view returns (bool) {\n        uint256 timeOfLastPayment = insuranceIssuees[_issuee]\n            .timeOfLastPremiumPayment;\n        uint256 currentTime = block.timestamp;\n        uint256 timePassedSinceLastPayment = currentTime.sub(timeOfLastPayment);\n\n        if (\n            timePassedSinceLastPayment >= minDurationBetweenPayments &&\n            timePassedSinceLastPayment <= maxDurationBetweenPayments\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @notice Check if the storage provider has paid all previous premiums\n     * @dev internal function\n     * @param _issuee Address of the storage provider\n     * @return bool\n     */\n    function hasPaidAllPreviousPremiums(\n        address _issuee\n    ) internal view returns (bool) {\n        uint timesPremiumPaid = insuranceIssuees[_issuee].timesPremiumPaid;\n        uint256 insuranceStartTime = insuranceIssuees[_issuee].premiumStartTime;\n        uint256 minimumDurationBetweenPayments = minDurationBetweenPayments;\n        // Number of times premium should have been paid\n        uint256 timesPremiumShouldHaveBeenPaid = block\n            .timestamp\n            .sub(insuranceStartTime)\n            .div(minimumDurationBetweenPayments);\n\n        if (timesPremiumPaid == timesPremiumShouldHaveBeenPaid - 1) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @notice Check if the storage provider's insurance is valid\n     * @dev internal function\n     * @param _issuee Address of the storage provider\n     */\n    function isInsuranceValid(address _issuee) internal view returns (bool) {\n        uint256 currentTime = block.timestamp;\n        uint256 insuranceEndTime = insuranceIssuees[_issuee].premiumEndTime;\n\n        if (currentTime < insuranceEndTime) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @notice Check if the storage provider is registered for insurance\n     * @dev internal function\n     * @param _issuee Address of the storage provider\n     */\n    function isRegisteredForInsurance(\n        address _issuee\n    ) internal view returns (bool) {\n        if (insuranceIssuees[_issuee].isInsured == true) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function calculatePayablePremium(\n        uint256 FILPrice\n    ) internal view returns (uint256) {\n        uint256 premium = insuranceIssuees[msg.sender].regularPremiumAmount;\n        uint256 payablePremium = premium.mul(FILPrice).div(10 ** 18);\n        return payablePremium;\n    }\n\n    /**\n     * @notice Check if the premium payment is valid\n     * @dev modifier\n     * @param _issuee Address of the storage provider\n     */\n    modifier validPremiumPayment(address _issuee) {\n        require(isRegisteredForInsurance(_issuee), \"Not registered\");\n        require(isInsuranceValid(_issuee), \"Insurance expired\");\n        require(\n            isInsurancePaymentTime(_issuee),\n            \"Premium payment time not reached\"\n        );\n        require(\n            hasPaidAllPreviousPremiums(_issuee),\n            \"Previous premiums not paid\"\n        );\n        _;\n    }\n\n    modifier requestForClaimValid(address _issuee) {\n        require(isRegisteredForInsurance(_issuee), \"Not registered\");\n        require(isInsuranceValid(_issuee), \"Insurance expired\");\n        require(\n            insuranceIssuees[_issuee].claimPaid == false,\n            \"Claim already paid\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Pay premium\n     * @dev Only valid storage provider can pay premium\n     * @param FILPrice Current FIL price\n     */\n    function getPremium(\n        uint256 FILPrice\n    ) public payable validPremiumPayment(msg.sender) {\n        uint256 payablePremium = calculatePayablePremium(FILPrice);\n        require(msg.value == payablePremium, \"Incorrect premium amount\");\n\n        insuranceIssuees[msg.sender].timesPremiumPaid = insuranceIssuees[\n            msg.sender\n        ].timesPremiumPaid.add(1);\n        insuranceIssuees[msg.sender].timeOfLastPremiumPayment = block.timestamp;\n\n        emit PremiumPaid(msg.value, msg.sender, block.timestamp);\n    }\n\n    // TODO\n    // function raiseClaimRequest() public requestForClaimValid(msg.sender) {\n\n    //     // TODO: Add logic to check if the claim is valid\n\n    //     insuranceIssuees[msg.sender].claimPaid = true;\n    //     emit ClaimRequested(\n    //         insuranceIssuees[msg.sender].claimAmount,\n    //         msg.sender,\n    //     );\n    // }\n\n    // TODO\n    // function payClaim(address _issuee) public onlyOwner {\n    //     emit ClaimPaid(\n    //         insuranceIssuees[_issuee].claimAmount,\n    //         _issuee,\n    //         block.timestamp\n    //     );\n    // }\n\n    // getter functions\n    function getDurationBetweenPayments() public view returns (uint256) {\n        return minDurationBetweenPayments;\n    }\n\n    function getInsuranceDuration() public view returns (uint256) {\n        return insuranceDuration;\n    }\n\n    function getRegisteredStorageProvider(\n        address _storageProvider\n    ) public view returns (insuranceIssuee memory) {\n        return insuranceIssuees[_storageProvider];\n    }\n}\n"
    },
    "contracts/mocks/InterfaceQueryAPI.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IQueryAPI {\n    struct minerInfo {\n        address minerAddress;\n        uint addressTotalBalance;\n        uint initialPledge;\n        uint lockedBlockRewards;\n        uint activeSectors;\n        uint faultySectors;\n        uint recoveredSectors;\n    }\n\n    function confirmBenificiaryAddress() external pure returns (bool);\n\n    function getMinerInfo(\n        address minerAddress\n    ) external view returns (minerInfo memory);\n\n    function mockGenerateMinerInfo(address _minerAddress) external;\n}\n"
    },
    "contracts/mocks/QueryAPI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\n\n\ncontract QueryAPI{\n    // Structure of data regarding the storage  provider.\n\n    // Mocking the data for now\n    mapping(address => minerInfo) public minerInfoMap;\n\n    struct minerInfo{\n        address minerAddress;\n        uint addressTotalBalance;\n        uint initialPledge;\n        uint lockedBlockRewards;\n        uint activeSectors;\n        uint faultySectors;\n        uint recoveredSectors;\n    }\n\n    /**\n     * @notice Verifies the minor benificiary\n     * @return bool\n     */\n    function confirmBenificiaryAddress() external pure returns (bool){\n        // this are hard coded values for testing purposes\n        return true;\n    }\n\n\n    /**\n     * @notice Mocks the miner info\n     * @param _minerAddress address of the miner\n     */\n    function mockGenerateMinerInfo(address _minerAddress) external {\n        minerInfoMap[_minerAddress].minerAddress = _minerAddress;\n        minerInfoMap[_minerAddress].addressTotalBalance = 30091*(10**18);\n        minerInfoMap[_minerAddress].initialPledge = 26521*(10**18);\n        minerInfoMap[_minerAddress].lockedBlockRewards =  1908*(10**18);\n        minerInfoMap[_minerAddress].activeSectors = 70220;\n        minerInfoMap[_minerAddress].faultySectors = 0;\n        minerInfoMap[_minerAddress].recoveredSectors = 0;\n    }\n\n\n    /**\n     * @notice Gets the miner info\n     * @param minerAddress address of the miner\n     * @return minerInfo\n     */\n    function getMinerInfo(address minerAddress) external view returns (minerInfo memory){\n        return minerInfoMap[minerAddress];\n    }\n\n}"
    },
    "contracts/Verifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\nimport \"./mocks/InterfaceQueryAPI.sol\";\n\ninterface IVerifier {\n    function verifyMinerData() external returns (bool);\n    function verifyMinorBenificiary() external returns (bool);\n    function calculatePremium(address _minorAddress) external returns (uint256);\n    function calculateClaimAmount(address _minorAddress) external returns (uint256);\n}\n\n\ncontract Verifier{\n\n    address public queryAPIAddress;\n    \n    constructor(address _queryAPIAddress){\n        queryAPIAddress = _queryAPIAddress;\n    }\n\n    /**\n     * @notice Verifies the miner data\n     * @return bool\n     */\n    function verifyMinerData() external view returns (bool){\n        IQueryAPI queryAPI = IQueryAPI(queryAPIAddress);\n        IQueryAPI.minerInfo memory minerInfo = queryAPI.getMinerInfo(msg.sender);\n        //   TODO : Add the logic to verify the miner data\n        return true;\n    }\n\n    /**\n     * @notice calculates the premium to be paid based on the miner data\n     * @return bool\n     */\n    function calculatePremium(address _minorAddress) external view returns (uint256){\n        // TODO : Add the logic to calculate the premium\n        return 100;\n    }\n\n    /**\n     * @notice calculates the claimAmount to be paid based on the miner data\n     * @return bool\n     */\n    function calculateClaimAmount(address _minorAddress) external view returns (uint256){\n        // TODO : Add the logic to calculate the claim amount\n        return 100;\n    }\n\n    /**\n     * @notice Verifies the minor benificiary\n     * @return bool\n     */\n    function verifyMinorBenificiary() external view returns (bool){\n        IQueryAPI queryAPI = IQueryAPI(queryAPIAddress);\n        return queryAPI.confirmBenificiaryAddress();\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}