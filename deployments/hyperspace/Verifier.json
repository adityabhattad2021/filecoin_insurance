{
  "address": "0xE0e0Dd37299c2d019658639fb01db4c312528d73",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_queryAPIAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_minorID",
          "type": "string"
        }
      ],
      "name": "calculateClaimAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_minorID",
          "type": "string"
        }
      ],
      "name": "calculatePremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minorAddress",
          "type": "address"
        }
      ],
      "name": "isClaimValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queryAPIAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0eed97ed56d41403ec825058518d12166ebff2467a342eafbf3b7cd649eb54b2",
  "receipt": {
    "to": null,
    "from": "0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f",
    "contractAddress": "0xE0e0Dd37299c2d019658639fb01db4c312528d73",
    "transactionIndex": 0,
    "gasUsed": "24428239",
    "logsBloom": "0x
    "blockHash": "0xb69998667fcf512a801c019f47dcf985df8491f2eee4fb16453376f376b9d92e",
    "transactionHash": "0x0eed97ed56d41403ec825058518d12166ebff2467a342eafbf3b7cd649eb54b2",
    "logs": [],
    "blockNumber": 58242,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBe0F340075060F856612d91e17cAe599dE92C745"
  ],
  "numDeployments": 1,
  "solcInputHash": "49d4768e6ee06357af2550fe27fffdc1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_queryAPIAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_minorID\",\"type\":\"string\"}],\"name\":\"calculateClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_minorID\",\"type\":\"string\"}],\"name\":\"calculatePremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minorAddress\",\"type\":\"address\"}],\"name\":\"isClaimValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryAPIAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateClaimAmount(string)\":{\"returns\":{\"_0\":\"bool\"}},\"calculatePremium(string)\":{\"returns\":{\"_0\":\"bool\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateClaimAmount(string)\":{\"notice\":\"calculates the claimAmount to be paid based on the miner data\"},\"calculatePremium(string)\":{\"notice\":\"calculates the premium to be paid based on the miner data\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Verifier.sol\":\"Verifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"./mocks/InterfaceQueryAPI.sol\\\";\\n\\ninterface IVerifier {\\n    function verifyMinerData() external returns (bool);\\n    function verifyMinorBenificiary() external returns (bool);\\n    function calculatePremium(string memory _minorAddress) external returns (uint256);\\n    function calculateClaimAmount(string memory _minorAddress) external returns (uint256);\\n    function isClaimValid(address _minorAddress) external returns (bool);\\n}\\n\\n\\ncontract Verifier{\\n\\n    address public queryAPIAddress;\\n    \\n    constructor(address _queryAPIAddress){\\n        queryAPIAddress = _queryAPIAddress;\\n    }\\n\\n    /**\\n     * @notice Verifies the miner data\\n     * @return bool\\n     */\\n    function verifyMinerData() internal view returns (bool){\\n        IQueryAPI queryAPI = IQueryAPI(queryAPIAddress);\\n        IQueryAPI.minerInfo memory minerInfo = queryAPI.getMinerInfo(\\\"akjsdksj\\\");\\n        //   TODO : Add the logic to verify the miner data\\n        return true;\\n    }\\n\\n    /**\\n     * @notice calculates the premium to be paid based on the miner data\\n     * @return bool\\n     */\\n    function calculatePremium(string memory _minorID) external view returns (uint256){\\n        // TODO : Add the logic to calculate the premium\\n        return 100 ether;\\n    }\\n\\n    /**\\n     * @notice calculates the claimAmount to be paid based on the miner data\\n     * @return bool\\n     */\\n    function calculateClaimAmount(string memory _minorID) external view returns (uint256){\\n        // TODO : Add the logic to calculate the claim amount\\n        return 100 ether;\\n    }\\n\\n    /**\\n     * @notice Verifies the minor benificiary\\n     * @return bool\\n     */\\n    function verifyMinorBenificiary() internal view returns (bool){\\n        IQueryAPI queryAPI = IQueryAPI(queryAPIAddress);\\n        return queryAPI.confirmBenificiaryAddress();\\n    }\\n\\n    function isClaimValid(address _minorAddress) external view returns (bool){\\n        // TODO : Add the logic to verify the claim\\n        bool isMinorBenificiary= verifyMinorBenificiary();\\n        bool isMinerDataValid = verifyMinerData();\\n        return isMinorBenificiary && isMinerDataValid;\\n    }\\n}\",\"keccak256\":\"0x74e1edbfbff767623123654fd6927713929c40e56140affdd0d4a6103f541425\",\"license\":\"MIT\"},\"contracts/mocks/InterfaceQueryAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQueryAPI {\\n    struct minerInfo {\\n        string minorID;\\n        uint addressTotalBalance;\\n        uint initialPledge;\\n        uint lockedBlockRewards;\\n        uint activeSectors;\\n        uint faultySectors;\\n        uint recoveredSectors;\\n    }\\n\\n    function confirmBenificiaryAddress() external pure returns (bool);\\n\\n    function getMinerInfo(\\n        string memory minerAddress\\n    ) external view returns (minerInfo memory);\\n\\n    function mockGenerateMinerInfo(address _minerAddress) external;\\n}\\n\",\"keccak256\":\"0xe75b1afc697ddfe6e48e2cf1b34817cf5cb7d20849d262db4280ef1daf004432\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161098e38038061098e833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b610877806101176000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806316f65d80146100515780637b32f4ef146100815780637e0dda151461009f578063b9b837f0146100cf575b600080fd5b61006b60048036038101906100669190610332565b6100ff565b604051610078919061037a565b60405180910390f35b61008961012b565b60405161009691906103a4565b60405180910390f35b6100b960048036038101906100b49190610505565b61014f565b6040516100c69190610567565b60405180910390f35b6100e960048036038101906100e49190610505565b610162565b6040516100f69190610567565b60405180910390f35b60008061010a610175565b90506000610116610210565b90508180156101225750805b92505050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600068056bc75e2d631000009050919050565b600068056bc75e2d631000009050919050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16634c7c81d86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a91906105ae565b91505090565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16638ccbaf716040518163ffffffff1660e01b815260040161026f90610638565b600060405180830381865afa15801561028c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102b591906107f8565b905060019250505090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102ff826102d4565b9050919050565b61030f816102f4565b811461031a57600080fd5b50565b60008135905061032c81610306565b92915050565b600060208284031215610348576103476102ca565b5b60006103568482850161031d565b91505092915050565b60008115159050919050565b6103748161035f565b82525050565b600060208201905061038f600083018461036b565b92915050565b61039e816102f4565b82525050565b60006020820190506103b96000830184610395565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610412826103c9565b810181811067ffffffffffffffff82111715610431576104306103da565b5b80604052505050565b60006104446102c0565b90506104508282610409565b919050565b600067ffffffffffffffff8211156104705761046f6103da565b5b610479826103c9565b9050602081019050919050565b82818337600083830152505050565b60006104a86104a384610455565b61043a565b9050828152602081018484840111156104c4576104c36103c4565b5b6104cf848285610486565b509392505050565b600082601f8301126104ec576104eb6103bf565b5b81356104fc848260208601610495565b91505092915050565b60006020828403121561051b5761051a6102ca565b5b600082013567ffffffffffffffff811115610539576105386102cf565b5b610545848285016104d7565b91505092915050565b6000819050919050565b6105618161054e565b82525050565b600060208201905061057c6000830184610558565b92915050565b61058b8161035f565b811461059657600080fd5b50565b6000815190506105a881610582565b92915050565b6000602082840312156105c4576105c36102ca565b5b60006105d284828501610599565b91505092915050565b600082825260208201905092915050565b7f616b6a73646b736a000000000000000000000000000000000000000000000000600082015250565b60006106226008836105db565b915061062d826105ec565b602082019050919050565b6000602082019050818103600083015261065181610615565b9050919050565b600080fd5b600080fd5b60005b83811015610680578082015181840152602081019050610665565b60008484015250505050565b600061069f61069a84610455565b61043a565b9050828152602081018484840111156106bb576106ba6103c4565b5b6106c6848285610662565b509392505050565b600082601f8301126106e3576106e26103bf565b5b81516106f384826020860161068c565b91505092915050565b6107058161054e565b811461071057600080fd5b50565b600081519050610722816106fc565b92915050565b600060e0828403121561073e5761073d610658565b5b61074860e061043a565b9050600082015167ffffffffffffffff8111156107685761076761065d565b5b610774848285016106ce565b600083015250602061078884828501610713565b602083015250604061079c84828501610713565b60408301525060606107b084828501610713565b60608301525060806107c484828501610713565b60808301525060a06107d884828501610713565b60a08301525060c06107ec84828501610713565b60c08301525092915050565b60006020828403121561080e5761080d6102ca565b5b600082015167ffffffffffffffff81111561082c5761082b6102cf565b5b61083884828501610728565b9150509291505056fea26469706673582212203d0c7dd33701ff46870f7bee4274a5d248b55de0034dd3e6666f26293358e74864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806316f65d80146100515780637b32f4ef146100815780637e0dda151461009f578063b9b837f0146100cf575b600080fd5b61006b60048036038101906100669190610332565b6100ff565b604051610078919061037a565b60405180910390f35b61008961012b565b60405161009691906103a4565b60405180910390f35b6100b960048036038101906100b49190610505565b61014f565b6040516100c69190610567565b60405180910390f35b6100e960048036038101906100e49190610505565b610162565b6040516100f69190610567565b60405180910390f35b60008061010a610175565b90506000610116610210565b90508180156101225750805b92505050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600068056bc75e2d631000009050919050565b600068056bc75e2d631000009050919050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16634c7c81d86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a91906105ae565b91505090565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16638ccbaf716040518163ffffffff1660e01b815260040161026f90610638565b600060405180830381865afa15801561028c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102b591906107f8565b905060019250505090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102ff826102d4565b9050919050565b61030f816102f4565b811461031a57600080fd5b50565b60008135905061032c81610306565b92915050565b600060208284031215610348576103476102ca565b5b60006103568482850161031d565b91505092915050565b60008115159050919050565b6103748161035f565b82525050565b600060208201905061038f600083018461036b565b92915050565b61039e816102f4565b82525050565b60006020820190506103b96000830184610395565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610412826103c9565b810181811067ffffffffffffffff82111715610431576104306103da565b5b80604052505050565b60006104446102c0565b90506104508282610409565b919050565b600067ffffffffffffffff8211156104705761046f6103da565b5b610479826103c9565b9050602081019050919050565b82818337600083830152505050565b60006104a86104a384610455565b61043a565b9050828152602081018484840111156104c4576104c36103c4565b5b6104cf848285610486565b509392505050565b600082601f8301126104ec576104eb6103bf565b5b81356104fc848260208601610495565b91505092915050565b60006020828403121561051b5761051a6102ca565b5b600082013567ffffffffffffffff811115610539576105386102cf565b5b610545848285016104d7565b91505092915050565b6000819050919050565b6105618161054e565b82525050565b600060208201905061057c6000830184610558565b92915050565b61058b8161035f565b811461059657600080fd5b50565b6000815190506105a881610582565b92915050565b6000602082840312156105c4576105c36102ca565b5b60006105d284828501610599565b91505092915050565b600082825260208201905092915050565b7f616b6a73646b736a000000000000000000000000000000000000000000000000600082015250565b60006106226008836105db565b915061062d826105ec565b602082019050919050565b6000602082019050818103600083015261065181610615565b9050919050565b600080fd5b600080fd5b60005b83811015610680578082015181840152602081019050610665565b60008484015250505050565b600061069f61069a84610455565b61043a565b9050828152602081018484840111156106bb576106ba6103c4565b5b6106c6848285610662565b509392505050565b600082601f8301126106e3576106e26103bf565b5b81516106f384826020860161068c565b91505092915050565b6107058161054e565b811461071057600080fd5b50565b600081519050610722816106fc565b92915050565b600060e0828403121561073e5761073d610658565b5b61074860e061043a565b9050600082015167ffffffffffffffff8111156107685761076761065d565b5b610774848285016106ce565b600083015250602061078884828501610713565b602083015250604061079c84828501610713565b60408301525060606107b084828501610713565b60608301525060806107c484828501610713565b60808301525060a06107d884828501610713565b60a08301525060c06107ec84828501610713565b60c08301525092915050565b60006020828403121561080e5761080d6102ca565b5b600082015167ffffffffffffffff81111561082c5761082b6102cf565b5b61083884828501610728565b9150509291505056fea26469706673582212203d0c7dd33701ff46870f7bee4274a5d248b55de0034dd3e6666f26293358e74864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateClaimAmount(string)": {
        "returns": {
          "_0": "bool"
        }
      },
      "calculatePremium(string)": {
        "returns": {
          "_0": "bool"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateClaimAmount(string)": {
        "notice": "calculates the claimAmount to be paid based on the miner data"
      },
      "calculatePremium(string)": {
        "notice": "calculates the premium to be paid based on the miner data"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1282,
        "contract": "contracts/Verifier.sol:Verifier",
        "label": "queryAPIAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}